
// Grid
//
// A flexible, nestable, responsive grid system.
//
// Styleguide: wGrid

$grid-count:  6 !default;
$grid-gutter: 2.5rem !default;
$grid-space:  1.875rem !default;

// prefix, min-width, grid count, gutter, space
$breakpoints:
	'\\@1-' 30em   6  $grid-gutter $grid-space,
	'\\@2-' 37.5em 9  $grid-gutter $grid-space,
	'\\@3-' 45em   12 $grid-gutter $grid-space,
	'\\@4-' 60em   12 $grid-gutter $grid-space !default;

@mixin grid($prefix: '', $n: 6, $gutter: 1.25rem, $space: 1.25rem) {
	.grid-block,
	.grid-index,
	/* Override .index > li */
	.index > .grid-block {
		margin-left:   -#{$gutter / 2};
		margin-right:  -#{$gutter / 2};
		margin-top:    -#{$space / 2};
		margin-bottom: -#{$space / 2};
	}

	.grid-block > .block,
	.#{$prefix}grid-index > li {
		display: inline-block;
		margin-left:  #{$gutter / 2};
		margin-right: #{$gutter / 2};
		margin-top:    #{$space / 2};
		margin-bottom: #{$space / 2};
	}

	.grid-block > .grid-block {
		margin-left: 0;
		margin-right: 0;
		margin-top: 0;
		margin-bottom: 0;
	}

	/* Grid widths. */

	.#{$prefix}grid-1\/1   {
		width: 100%;
	}

	@for $i from 1 through $n {
		@for $j from 1 to $i {
			.#{$prefix}grid-#{$j}\/#{$i}   {
				width: calc(#{100% * $j / $i} - #{$gutter * ($i - $j) / $i});
			}
		}
	}

	/* Grid margins. */

	.#{$prefix}grid-left-0 {
		margin-left: #{$gutter / 2};
	}

	@for $i from 1 through $n {
		@for $j from 1 to $i {
			.#{$prefix}grid-left-#{$j}\/#{$i} {
				margin-left: calc(#{100% * $j / $i} + #{$gutter * $j / $i});
			}
		}
	}

	/* Grid widths inside a grid-block or grid-index. */

	.grid-block > .#{$prefix}grid-1\/1,
	.grid-index > .#{$prefix}grid-1\/1,
	.#{$prefix}grid-index-1\/1 > li {
		width: calc(100% - #{$gutter});
	}

	@for $i from 1 through $n {
		@for $j from 1 to $i {
			.grid-block > .#{$prefix}grid-#{$j}\/#{$i},
			.grid-index > .#{$prefix}grid-#{$j}\/#{$i},
			.#{$prefix}grid-index-#{$j}\/#{$i} > li {
				width: calc(#{100% * $j / $i} - #{$gutter});
			}
		}
	}

	/* Grid margins inside a grid-block or grid-index. */

	.grid-block > .#{$prefix}grid-left-0,
	.grid-index > .#{$prefix}grid-left-0 {
		margin-left: #{$gutter / 2};
	}

	@for $i from 1 through $n {
		@for $j from 1 to $i {
			.grid-block > .#{$prefix}grid-left-#{$j}\/#{$i},
			.grid-index > .#{$prefix}grid-left-#{$j}\/#{$i} {
				margin-left: calc(#{100% * $j / $i} + #{$gutter / 2});
			}
		}
	}

	/* Bleed widths and margins inside a grid-block or grid-index. */

	.#{$prefix}width-1\/1,
	.grid-block > .#{$prefix}width-1\/1,
	.grid-index > .#{$prefix}width-1\/1 {
		width: 100%;
		margin-left: 0;
		margin-right: 0;
	}

	@for $i from 1 through $n {
		@for $j from 1 to $i {
			.#{$prefix}width-#{$j}\/#{$i},
			.grid-block > .#{$prefix}width-#{$j}\/#{$i},
			.grid-index > .#{$prefix}width-#{$j}\/#{$i} {
				width: #{100% * $j / $i};
				margin-left: 0;
				margin-right: 0;
			}
		}
	}
}

/*
grid.css
Warning: this file is auto-generated from scss/grid.scss. Do not modify!
*/

// .grid-block
//
// Wraps rows of child <code>block</code>s to form a grid with gutters.
// Child <code>block</code>s are rendered as <code>inline-block</code>s,
// horizontal margins are set to create gutter spacings, and vertical margins
// set to the vertical grid. Because <code>inline-block</code>s are space
// sensitive, to get accurate spacing child blocks should have no spaces
// between them. If you are using a templating engine it likely has some kind of
// <code>{{spaceless}}</code> process. If not, here is one (valid) way of sanely
// writing spaceless html:
//
// Markup: <div class="grid-block block">
//   <code class="block grid-1/1 white-color black-bg">.grid-1/1</code
//  ><code class="block grid-1/2 white-color black-bg">.grid-1/2</code
//  ><code class="block grid-1/2 white-color black-bg">.grid-1/2</code
//  ><code class="block grid-1/3 white-color black-bg">.grid-1/3</code
//  ><code class="block grid-2/3 white-color black-bg">.grid-2/3</code
//  ><code class="block grid-1/4 white-color black-bg">.grid-1/4</code
//  ><code class="block grid-3/4 white-color black-bg">.grid-3/4</code
//  ><code class="block grid-1/5 white-color black-bg">.grid-1/5</code
//  ><code class="block grid-3/5 white-color black-bg">.grid-3/5</code
//  ><code class="block grid-1/5 white-color black-bg">.grid-1/5</code
//  ><code class="block grid-1/6 white-color black-bg">.grid-1/6</code
//  ><code class="block grid-1/2 white-color black-bg">.grid-1/2</code
//  ><code class="block grid-1/3 white-color black-bg">.grid-1/3</code>
// </div>
//
// Styleguide: wGrid.1

// .grid-index
//
// Similar to <code>grid-block</code>, but for lists, where the children
// <code class="html-tag">li</code>s behave as do <code>block</code>s inside
// a <code>grid-block</code>.
//
// Markup: <ul class="grid-index-1/3 grid-index index">
//   <li class="white-color black-bg">One</li
//   ><li class="white-color black-bg">Two</li
//   ><li class="white-color black-bg">Three</li>
// </ul>
//
// Styleguide: wGrid.11


.grid-block,
.grid-index {
	position: relative;
	padding: 0;
}

.grid-block,
.grid-index,
/* Override .index > li */
.index > .grid-block {
	margin-left:   -#{$grid-gutter / 2};
	margin-right:  -#{$grid-gutter / 2};
	margin-top:    -#{$grid-space / 2};
	margin-bottom: -#{$grid-space / 2};
}


// .grid-n/d
//
// Sets width to <i>n</i>/<i>d</i> divisions of the horizontal grid. There are 6
// divisions available, with a gutter of <code>1.25rem</code>
// (<code>20px</code>). Widths are expressed as reduced fractions, so for
// example there is no <code>.grid-2/4</code>, because that is reduceable to
// <code>.grid-1/2</code>.
//
// .grid-1/1 - Full width column.
// .grid-1/2 - Half width column.
// .grid-1/3 - Third width column.
// .grid-2/3 - Two thirds width column.
// .grid-1/4 - Quarter width column.
// .grid-3/4 - Three-quarters width column.
// .grid-1/5 - Fifth width column.
// .grid-... - ...
// .grid-5/6 - Five-sixths width column.
//
// Styleguide: wGrid.2


// .grid-index-n/d
//
// As with <code>.grid-<i>n</i>/<i>d</i></code> classes, but sets the width of
// child <code class="html-tag">li</code>s to <i>n</i>/<i>d</i> divisions of the
// horizontal grid.
//
// .grid-index-1/1 - Full width column.
// .grid-index-1/2 - Half width column.
// .grid-index-1/3 - Third width column.
// .grid-index-2/3 - Two thirds width column.
// .grid-... - ...
// .grid-5/6 - Five-sixths width column.
//
// Styleguide: wGrid.12

@include grid('', $grid-count, $grid-gutter, $grid-space);

@each $breakpoint in $breakpoints {
	@media all and (min-width: nth($breakpoint, 2)) {
		@include grid(nth($breakpoint, 1), nth($breakpoint, 3), nth($breakpoint, 4), nth($breakpoint, 5));
	}
}


// .grid-index-1/n
//
// A <code>grid-index</code> whose child <code class="html-tag">li</code> widths are set
// to <code>1/n</code> grid divisions, <code>n</code> being the number of
// children. Accomodates up to 12 children.
//
// Markup: <ul class="grid-index-1/n grid-index index">
//   <li class="white-color black-bg">One</li
//   ><li class="white-color black-bg">Two</li
//   ><li class="white-color black-bg">Three</li>
// </ul>
//
// Styleguide: wGrid.1001

// .@breakpoint-grid-index-1/n
//
// A <code>grid-index</code> whose child <code class="html-tag">li</code> widths
// are set to <code>1/n</code> grid dvisions, <code>n</code> being the number of
// children.
//
// Markup: <ul class="@600-grid-index-1/n grid-index index">
//   <li class="white-color black-bg">One</li
//   ><li class="white-color black-bg">Two</li
//   ><li class="white-color black-bg">Three</li>
// </ul>
//
// Styleguide: wGrid.1002

@mixin grid-index-adaptive($gutter: 1.25rem, $n: 6, $prefix: '') {
	@for $i from 2 through $n {
		.#{$prefix}grid-index-1\/n > li:nth-last-child(#{$i}):first-child,
		.#{$prefix}grid-index-1\/n > li:nth-last-child(#{$i}):first-child ~ li {
			width: calc(#{100% / $i} - #{$gutter});
		}
	}

	/* width-1/n classes */
	@for $i from 2 through $n {
		.#{$prefix}width-1\/n:nth-last-child(#{$i}):first-child,
		.#{$prefix}width-1\/n:nth-last-child(#{$i}):first-child ~ li {
			width: #{100% / $i};
		}
	}
}

@include grid-index-adaptive($grid-gutter, $grid-count);

@each $breakpoint in $breakpoints {
	@media all and (min-width: nth($breakpoint, 2)) {
		@include grid-index-adaptive(nth($breakpoint, 4), nth($breakpoint, 3), nth($breakpoint, 1));
	}
}
