/*
Layout.

Styleguide: 1
*/

/*
.block

<p>For layout. There are two ways a <code>.block</code> can be styled: as a
<code>block</code>, for a vertical layout, or as <code>inline-block</code>, for
a horizontal layout. <code>block</code> by default, obviously.</p>
<p>Any <code>.block</code> child of a <code>.grid-block</code> becomes an
inline-block. Grid layout can be designed by adding
<code>.grid-<i>n</i>/<i>d</i></code> classes to those children.</p>
<p>Applied to a media tag like img, svg, video and canvas, <code>.block</code>
will scale the element to fill the available width.</p>

Styleguide: 1.1
*/

.block {
	display: block;

	/* Set as position parent */
	position: relative;

	/* Force img, video, svg to scale. */
	height: auto;

	/* Set them up to play nice as inline-blocks. */
	vertical-align: top;
	overflow: visible;

	/* Set them up to place nice as flexboxes. */
	justify-content: center;

	/* Negate possible spacing when .block is used on something typographic like
	   a <p>, for example. Also, make blocks behave as centered wraps by default. */
	margin: 0 auto;
	padding: 0;
}

.block > img,
.block > svg,
.block > video,
.block > canvas,
.block > object,
.block > embed,
.block > iframe {
	/* Don't allow media to break out of .block bounds. */
	max-width: 100%;
}

hr.block {
	height: 1px;
}


/*
.inline-block

Styleguide: 1.1.inline-block
*/

.inline-block {
	display: inline-block;
}


/*
.flex-block

Styleguide: 1.1.flex
*/

.flex-block {
	display: flex;
}

.n-flex-block { flex-direction: column-reverse; }
.s-flex-block { flex-direction: column; }
.e-flex-block { flex-direction: row; }
.w-flex-block { flex-direction: row-reverse; }

/* Keep focus box-shadows over the top of their siblings */
.flex-block > * { z-index: 0; }
.flex-block > .select-button { z-index: 1; }
.flex-block > *:focus { z-index: 2; }

.wrap         { flex-wrap: wrap; }
.no-wrap      { flex-wrap: nowrap; }

.flex-1\/2 { flex: 0 0 50%; }
.flex-1\/3 { flex: 0 0 33.333333333%; }
.flex-2\/3 { flex: 0 0 66.666666667%; }
.flex-1\/4 { flex: 0 0 25%; }
.flex-3\/4 { flex: 0 0 75%; }
.flex-1\/5 { flex: 0 0 20%; }
.flex-2\/5 { flex: 0 0 40%; }
.flex-3\/5 { flex: 0 0 60%; }
.flex-4\/5 { flex: 0 0 80%; }
.flex-1\/6 { flex: 0 0 16.666666667%; }
.flex-5\/6 { flex: 0 0 83.333333333%; }
.flex-1\/7 { flex: 0 0 14.285714286%; }
.flex-2\/7 { flex: 0 0 28.571428571%; }
.flex-3\/7 { flex: 0 0 42.857142857%; }
.flex-4\/7 { flex: 0 0 57.142857143%; }
.flex-5\/7 { flex: 0 0 71.428571429%; }
.flex-6\/7 { flex: 0 0 85.714285714%; }
.flex-1\/8 { flex: 0 0 12.5%; }
.flex-3\/8 { flex: 0 0 37.5%; }
.flex-5\/8 { flex: 0 0 62.5%; }
.flex-7\/8 { flex: 0 0 87.5%; }


/*
.tab-block

A block animated to behave as a tab that fades to reveal content when the class
<code>active</code> is added.

Styleguide: 4.tab-block
*/

.js .tab-block {
	position: relative;
	width: 100%;

	visibility: hidden;
	opacity: 0;
	z-index: 1;

	transition-property: opacity, visibility;
	transition-duration: 120ms;
	transition-timing-function: ease-in;

	/* A nice bit of hardware acceleration should help the transitions run
	   smoothly. */
	transform: translate3d(0,0,0);
}

.js .tab-block.active {
	visibility: visible;
	opacity: 1;
	z-index: 2;
	transition-timing-function: ease-out;
}

.js .tab-block.active {
	z-index: 2;
}


/*
.toggle-block

A block animated to behave like a drawer that reveals content when the class
<code>active</code> is added. Note in this example the class <code>toggle</code>
is an action class that gives the block <code>active</code> when a link that
references it is clicked.

Markup: <a href="#some-stuff">Click to show</a>
<div class="toggle-block block toggle" id="some-stuff">
  <p>Crunchum ipsum dolor sit coder void, constructor function, sed do while loop
  python orientation semi colon incident. Duis aute irure indent tabs or
  spaces velit esse cilium buntum how crunchy duntum.</p>
</div>

Styleguide: 1.1.toggle-block
*/

.toggle-block {
	max-height: 0;
	opacity: 0.5;
	overflow: hidden;
	visibility: hidden;
	transition:
		max-height 400ms cubic-bezier(0, 0.5, 0.33, 1),
		padding-top 400ms cubic-bezier(0.8, 0, 0.8, 0),
		padding-bottom 400ms cubic-bezier(0.48, 0.85, 0.8, 1),
		margin-bottom 400ms cubic-bezier(0, 0.5, 0.33, 1),
		opacity 400ms linear,
		border-color 400ms linear,
		background-color 200ms linear,
		visibility 400ms linear;
}

.toggle-block:not(.active) {
	padding-top: 0;
	padding-bottom: 0;
}

.toggle-block.active {
	max-height: 100rem;
	opacity: 1;
	visibility: visible;
	transition:
		max-height 400ms cubic-bezier(0.4, 0, 1, 0.32),
		padding-top 400ms cubic-bezier(0.2, 1, 0.2, 1),
		padding-bottom 400ms cubic-bezier(0.6, 0.9, 0.7, 1),
		margin-bottom 400ms cubic-bezier(0.4, 0, 1, 0.32),
		opacity 400ms linear,
		border-color 400ms linear,
		background-color 200ms linear,
		visibility 400ms linear;
}


/*
.swipe-block

Markup: <div class="swipe-block block swipeable swipeable">
    <div class="slock switchable" id="slide-0">
        <img class="block" src="//source.unsplash.com/category/nature/1300x620" alt="Image 1" draggable="false" />
    </div
    ><div class="block switchable" id="slide-1">
        <img class="block" src="//source.unsplash.com/category/nature/1300x620" alt="Image 2" draggable="false" />
    </div
    ><div class="block switchable" id="slide-2">
        <img class="block" src="//source.unsplash.com/category/nature/1300x620" alt="Image 3" draggable="false" />
    </div>
</div>

Styleguide: 4.slides
*/

.swipe-block {
	white-space: nowrap;
}

.swipe-block > .block {
	display: inline-block;
	margin-left: 0;
	margin-right: 0;
	width: 100%;
}

.swipe-block > img,
.swipe-block > .block > img {
	width: 100%;
	height: auto;
	max-width: none;
	object-fit: contain;
	object-position: 50% 50%;
}

.swipe-block > .block,
.swipe-block > .block:focus,
.swipe-block > .block > img,
.swipe-block > .block > img:focus {
	outline: none;
}

.swipe-block > .block + .block {
	margin-left: 0;
}

.js .swipe-block {
	/* A nice bit of hardware acceleration should help the transitions run
	   smoothly. */
	-webkit-transform: translate3d(0,0,0);
	    -ms-transform: translate3d(0,0,0);
	        transform: translate3d(0,0,0);

	-webkit-touch-callout: none;
	  -webkit-user-select: none;
	     -moz-user-select: none;
	      -ms-user-select: none;
	          user-select: none;

	-webkit-transition-property: transform;
	        transition-property: transform;
	-webkit-transition-duration: 333ms;
	        transition-duration: 333ms;
	-webkit-transition-timing-function: cubic-bezier(0.1, 0.7, 0.7, 1);
	        transition-timing-function: cubic-bezier(0.1, 0.7, 0.7, 1);
}

@media print {
	.js .swipe-block {
		position: static;
		transition: none !important;
	}
}
