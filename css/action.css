
/*
Actions

Action classes progressively enhance elements with behaviours using JavaScript
(found in <code>bolt-musees.js</code>). Actions are instantiated lazily when
they are first activated, so there is no need to initialise them by calling
any jQuery plugins.

When a link is clicked and its href references a node in the DOM that
has an action class, an <code>"activate"</code> event is triggered on that
node, and it is given the class <code>"active"</code>. All links that point to
it are given the class <code>"on"</code>. The type of behaviour determines how
the node can be deactivated.

The <code>activate</code> and <code>deactivate</code> events are jQuery special
events. Nodes with action classes can be activated via JS, simply by
triggering an activate event: <pre>jQuery('#my-toggle').trigger('activate');</pre>

.active - applied to elements with action classes
.on     - applied to <code class="html-tag">a</code>s with an href that
          points to an element with an action class (or
          <code class="html-tag">label</code>s with a <code>for</code> attribute
          pointing to a radio or checkbox).

Styleguide: yactions
*/

.tab,
.slide {
	display: inline-block;
	position: relative;
	width: 100%;
	/* Give tabs and slides the same origin despite being inline-blocks. */
	margin-right: -100%;
}

.tab {
	vertical-align: top;
}

.slide {
	vertical-align: middle;
}


/* .popdown, .dropdown */

.popdown,
.dropdown {
	display: block;
	/* Hiding overflow causes problems in IE7 when the dropdown's container
	   is narrower than the dropdown's content. I'm not sure we have any real
	   reason to hide it. Probably if you're animating height to reveal you
	   want this. */
	/*overflow: hidden;*/
	position: absolute;
	/* They should appear over the top of following content. */
	z-index: 3;
}


/* Transitions */

.js .tab,
.js .slide,
.js .layer,
.js .popdown,
.js .dropdown {
	/* A nice bit of hardware acceleration should help the transitions run
	   smoothly. */
	-webkit-transform: translate3d(0,0,0);
	    -ms-transform: translate3d(0,0,0);
	        transform: translate3d(0,0,0);
}

.js .tab,
.js .dialog-layer,
.js .loading_layer {
	visibility: hidden;
	opacity: 0;
	z-index: 1;

	-webkit-transition-property: opacity, visibility;
	        transition-property: opacity, visibility;
	-webkit-transition-duration: 120ms;
	        transition-duration: 120ms;
	-webkit-transition-timing-function: ease-in;
	        transition-timing-function: ease-in;
}

.js .tab.active,
.js .dialog-layer.active,
.js .loading .loading_layer {
	visibility: visible;
	opacity: 1;
	z-index: 2;

	-webkit-transition-timing-function: ease-out;
	        transition-timing-function: ease-out;
}

.js .tab.active,
.js .loading .loading_layer {
	z-index: 2;
}
	
.js .dialog-layer.active {
	z-index: 10;
}

.js .popdown,
.js .dropdown {
	opacity: 0;
	visibility: hidden;

	-webkit-transition-property: opacity, visibility, transform;
	        transition-property: opacity, visibility, transform;
}

.js .popdown,
.js .dropdown {
	top: 2em;

	-webkit-transition-duration: 180ms;
	        transition-duration: 180ms;

	-webkit-transition-timing-function: ease-out;
	        transition-timing-function: ease-out;
}

.js .popdown.active,
.js .dropdown.active {
	opacity: 1;
	visibility: visible;
}

.js .popdown.active,
.js .dropdown.active {
	-webkit-transform: translate3d(0, 0.3333rem, 0);
	    -ms-transform:   translate(0, 0.3333rem, 0);
	        transform: translate3d(0, 0.3333rem, 0);

	-webkit-transition-duration: 60ms;
	        transition-duration: 60ms;

	-webkit-transition-timing-function: ease-in;
	        transition-timing-function: ease-in;
}




/*
.slide

An action class for making slideshows.

Clicks on links pointing to a <code>slide</code> trigger its active state,
and deactivate all it's sibling slides. In other words, only one slide amongst
siblings can be active at any one time. Slides are also given swipe left and
swipe right behaviour.

Note that in this example, the class <code>slide</code> makes the
<code>img</code>s activatable, but the classes <code>slide-block block</code>
are needed to define style and transitions.

Markup: <div class="slides-block block">
  <img class="slide-block block slide active" id="slide-1" src="//source.unsplash.com/category/nature/520x310"
  /><img class="slide-block block slide" id="slide-2" src="//source.unsplash.com/category/technology/520x310"
  /><img class="slide-block block slide" id="slide-3" src="//source.unsplash.com/category/food/520x310" />
</div>
<a href="#slide-1">1</a>
<a href="#slide-2">2</a>
<a href="#slide-3">3</a>

Styleguide: yactions.slide
*/

.js .slide {
	/* By default all slides are positioned off to the left. */
	left: -100%;

	/* Slides have no height by default to stop them influencing
	   scrollbars when they are not active. */
	height: 0;
	overflow: hidden;
	z-index: 1;

	-webkit-touch-callout: none;
	  -webkit-user-select: none;
	     -moz-user-select: none;
	      -ms-user-select: none;
	          user-select: none;

	-webkit-transition-property: left, height;
	        transition-property: left, height;
	-webkit-transition-duration: 333ms;
	        transition-duration: 333ms;
	-webkit-transition-timing-function: cubic-bezier(0.1, 0.7, 0.7, 1);
	        transition-timing-function: cubic-bezier(0.1, 0.7, 0.7, 1);
}

.js .slide.active {
	/* The .active slide is positioned in the centre. */
	left: 0;
	height: auto;
	overflow: visible;
	z-index: 2;
}

.js .slide.active ~ .slide {
	/* All slides after the .active slide are positioned off to
	   the right. */
	left: 100%;
}

.js .slide.active ~ .slide.active {
	/* Except, of course, any that are still active. */
	left: 0;
}

.js .stacked_slide {
	left: 0;
}

@media print {
	.js .slide {
		position: static;
		left: 0;
		width: 34%;
		height: auto;
		margin-right: 3%;
	}

	.js .slide:nth-child(3n) {
		margin-right: 0;
	}
}


/*
.toggle

An action class for creating drawers, submenus or anything else that has
open/closed state.

Clicks on links pointing to a <code>.toggle</code> toggle its active state.
Note that in this example, the class <code>toggle</code> gives the
<code class="html-tag">p</code> active/inactive behaviour, but the classes
<code>toggle-block block</code> are needed to give it style and transitions.

Markup: <a class="action-button button" href="#toggle-test">Toggle text</a>
<p class="toggle toggle-block block" id="toggle-test">
  Crunchum ipsum dolor sit coder void, constructor function, sed do while loop
  python orientation semi colon incident. Duis aute irure indent tabs or spaces
  velit esse cilium buntum how crunchy duntum.
</p>

Styleguide: yactions.toggle
*/


/*
.pop

An action class for creating drawers, submenus or anything else that has
momentary open/closed state â€“ ie, click outside it and it closes automatically.

Styleguide: yactions.pop
*/



/*
In a similar way, bolt provides classes for enhancing form elements.
If an <code>input[type="checkbox"]</code> or <code>input[type="radio"]</code>
is checked, all labels with a <code>for</code> attribute pointing to it are
given the class <code>"on"</code>. (Unlike elements with an action class,
<code>"active"</code> is not applied to the input and an <code>activate</code>
event is not triggered. Inputs already have the <code>:checked</code> pseudo
class and the <code>change</code> event.)

Bolt also validates form inputs and displays error messages.



.button > select

A label with <code>button</code> that points to a <code>select</code> via its
<code>for</code> attribute has it's text updated when the <code>select</code> is
changed.

Markup: <label class="select-button button" for="tab-select">
  Choose an option
  <select id="tab-select">
    <option value="1">Option 1</option>
    <option value="2">Option 2</option>
  </select>
</label>



.button > .href-select

Markup: <label class="select-button button" for="tab-select">
	Select Button
	<select class="href-select">
		<option value="/one">one.html</option>
		<option value="/two">two.html</option>
		<option value="/three">three.html</option>
	</select>
</label>




label > input[type="radio"]

Markup: <label class="radio-label" for="my-radio-1">
  <input type="radio" name="my-radio" id="my-radio-1" value="1" />
  My radio label
</label>




.checkbox-label > input[type="checkbox"]

Markup: <label class="checkbox-label" for="my-checkbox-1">
  My checkbox label
  <input type="checkbox" name="my-checkbox" id="my-checkbox-1" value="1" />
</label>
*/
