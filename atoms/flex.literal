
${
    this.xGapUnit = /[a-z]+$/.exec(data['column-gap']),
    this.yGapUnit = /[a-z]+$/.exec(data['row-gap']),
    ''
}

.flex,
.${ data.prefix }flex {
    ${ data['column-gap'] ? '--x-gap: ' + (this.xGapUnit ? data['column-gap'] : rem(data['column-gap']) + 'rem') + ';' : '' }
    ${ data['row-gap']    ? '--y-gap: ' + (this.yGapUnit ? data['row-gap']    : rem(data['row-gap'])    + 'rem') + ';' : '' }
}

.${ data.prefix }flex {
    display: flex;
    flex-wrap: wrap;
    column-gap: var(--x-gap);
    row-gap:    var(--y-gap);
}

.${ data.prefix }flex > *  { flex: 0 0 auto; margin: 0; }
.${ data.prefix }flex > li { display: block; }

.${ data.prefix }wrap      { flex-wrap: wrap; }
.${ data.prefix }no-wrap   { flex-wrap: nowrap; }

.${ data.prefix }x-flex    { flex-direction: row; }
.${ data.prefix }y-flex    { flex-direction: column; }

.${ data.prefix }y-flex > .x-start  { align-self: start; }
.${ data.prefix }y-flex > .x-center { align-self: center; }
.${ data.prefix }y-flex > .x-end    { align-self: end; }

/* Attempt to keep focus box-shadows over the top of their siblings */
.${ data.prefix }flex *              { z-index: 0; }
.${ data.prefix }flex .select-button { z-index: 1; }
.${ data.prefix }flex *:focus        { z-index: 2; }
