
/**
Modifiers.
**/

/*
.active
Modify a two-state component to represent active state.
*/

.active {}

/*
.on
Modify a link or button that references a two-state component to represent
active state.
*/

.on {}

/*
.hidden

Hide element.
*/

.hidden {
	display: none !important;
}

/**
.print-hidden
Hide an element on printed page.
**/

@media print {
	.print-hidden {
		display: none !important;
	}
}

/*
.active-hidden
Hide an element when its parent has class <code>active</code>.
*/

.active-hidden.active,
.active > .parent-active-hidden {
	display: none !important;
}

/*
.active-shown
Show an element when its parent has class <code>active</code>.
*/

.active-shown:not(.active) {
	display: none !important;
}

:not(.active) > .parent-active-shown:not(.active) {
	display: none !important;
}

/*
.focus-shown
Show an element only when focused
*/

.focus-shown:not(:focus) {

	opacity: 0 !important;
	/*visibility: hidden !important;*/
	position: absolute !important;
	top: 0 !important;
	left: 0 !important;
	width: 1px !important;
	height: 1px important;

	background: red;
}


/*
.on-hidden
Hide an element when its parent has class <code>on</code>.
*/

.on-hidden.on,
.on > .on-hidden {
	display: none !important;
}

/*
.on-shown
Show an element when its parent has class <code>on</code>.
*/

:not(.on) > .on-shown:not(.on) {
	display: none !important;
}

/*
.requested-hidden
Hide an element when its parent has class <code>requested</code>.
*/

.requested-hidden.requested,
.requested > .requested-hidden {
	display: none !important;
}

/*
.requested-shown
Show an element when its parent has class <code>requested</code>.
*/

:not(.requested) > .requested-shown:not(.requested) {
	display: none !important;
}


/**
.disabled
**/

.disabled,
:disabled {
	opacity: 0.4;
}

/**
.requested
Add <code>::after</code> content representing a loading animation.

```html
<div class="requested" style="height: 7.5rem;">
```
**/

@-webkit-keyframes rotation {
	from {-webkit-transform: rotate(0deg);}
	to {-webkit-transform: rotate(359deg);}
}

@keyframes rotation {
	from {transform: rotate(0deg);}
	to {transform: rotate(359deg);}
}

.js .requested::after {
	content: '';
	position: absolute;
	left: 50%;
	top: 50%;
	margin-left: -0.9375rem;
	margin-top: -0.9375rem;
	height: 1.875rem;
	width: 1.875rem;
	opacity: 1;

	-webkit-animation: rotation 1000ms infinite linear;
	        animation: rotation 1000ms infinite linear;

	border:     0.3125rem solid rgba(63, 63, 63, 0.15);
	border-top: 0.3125rem solid rgba(63, 63, 63, 1);
	border-radius: 100%;
	z-index: 100;
}

/**
.no-select
Prohibit user selection.
**/

.no-select {
	-webkit-touch-callout: none !important;
	  -webkit-user-select: none !important;
	      -ms-user-select: none !important;
	          user-select: none !important;
}

/**
.no-transition
Cancel transitions on an element and all descendents.
**/

.no-transition,
.no-transition *,
.no-transition::before,
.no-transition::after,
.no-transition *::before,
.no-transition *::after {
	-webkit-transition: none !important;
	   -moz-transition: none !important;
	     -o-transition: all 0 linear 0 !important;
	        transition: none !important;
}

/**
.clear
The clearfix hack.
**/

.clear::after {
	visibility: hidden;
	display: block;
	font-size: 0;
	content: " ";
	clear: both;
	height: 0;
}


/*
.fixed
*/

.fixed {
	position: fixed !important;
}


/*
.sticky
*/

.sticky {
	position: -webkit-sticky !important;
	position: sticky !important;
	top: 0;
}
