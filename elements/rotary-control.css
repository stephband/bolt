
/**
rotary-control

```html
<rotary-control name="rotary" max="3" ticks="0 0.5 1 1.5 2 2.5 3" transform="cubic" unit="s">Rotary</rotary-control>
```
**/

/*
The CSS that makes this web component flexible may look a little funky. The
width of the component dictates the size of the handle, track and tick radius,
then those elements push the (automatic) height of the component. The ticks are
normally layed out vertically before being transformed. They are usually the
tallest element. If there are no ticks the component will collapse a bit
smaller.
*/

:host {
    --unit-value: 0;
    --unit-zero: 0;

    /** --touch-range **/
    --touch-range: 15rem;

    --handle-width: calc(100% - 2 * var(--tick-height) - 4 * var(--tick-font-size) - 1.25rem);
    --handle-background: white;
    --handle-border: 1px solid rgb(187, 187, 187);
    --handle-shadow: 0 0.1875rem 0.375rem 0 rgba(0,0,0,0.2);

    --track-width:  calc(var(--handle-width) + 0.75rem);
    --track-background:  white;
    /* Draw a rotational gradient that acts as a 'progress' fill from 0 to value */
    --track-background: conic-gradient(
        from calc(180deg + var(--rotation-start)),
        #ffffff 0deg,
        #ffffff calc(min(var(--unit-value), var(--unit-zero)) * var(--rotation-range)),
        #88deff calc(min(var(--unit-value), var(--unit-zero)) * var(--rotation-range)),
        #88deff calc(max(var(--unit-value), var(--unit-zero)) * var(--rotation-range)),
        #ffffff calc(max(var(--unit-value), var(--unit-zero)) * var(--rotation-range))
    );
    --track-shadow: inset 0 0.25rem 0.5rem rgba(0,0,0,0.24);

    --label-font-size: 1em;
    --label-line-height: 1.2em;
    --label-letter-spacing: -0.04em;
    --label-color: black;
    --label-shadow: none;

    --output-font-size: 0.75rem;
    --output-line-height: 1rem;
    --output-letter-spacing: -0.04em;
    --output-color: #46789a;
    --output-shadow: none;

    --dot-width: 0.3125rem;
    --dot-height: var(--dot-width);
    --dot-distance: calc(50% - 0.5rem);
    --dot-background: #46789a;
    --dot-border: none;
    --dot-shadow: none;

    --rotation-start: 30deg;
    --rotation-range: 300deg;

    --tick-width: 0.1875rem;
    --tick-height: var(--tick-width);
    --tick-radius: calc(0.5 * var(--handle-width) + 0.625rem);
    --tick-color: black;
    --tick-background: var(--tick-color);
    --tick-border: none;
    --tick-border-radius: 50%;
    --tick-shadow: none;
    --tick-font-size: 0.625rem;
    --tick-line-height: 0.9375rem;
    --tick-letter-spacing: -0.0125em;
    --tick-text-shadow: none;

    --focus-shadow: inset 0 0 0.9375rem hsla(200,100%,40%,0.5);

    position: relative;
    display: grid;
    grid-template-areas:
        'handle handle'
        'label plugs';
    grid-template-columns: 1fr min-content;
    grid-row-gap: 0.375rem;

    /*grid-template-rows: calc(2 * var(--tick-distance) + 2 * var(--tick-width) + 2 * var(--tick-line-height)) min-content;*/
    align-items: center;
    justify-items: center;
    align-content: start;
    justify-content: center;
}

:host * {
    box-sizing: border-box;
}

:host(:focus) {
    --output-color: white;
    --handle-background: #46789a;
    --handle-border: 1px solid #46789a;
    --dot-background: white;
    --tick-color: #46789a;
    --tick-background: #46789a;

    /* Nullify simulated focus style. */
    outline-width: 0 !important;
    box-shadow: none !important;
}

:host > * {
    margin: 0;
}

:host::before {
    content: '';
    grid-area: handle;
    width: var(--track-width);
    height: 0;
    padding-top: var(--track-width);
    box-shadow: var(--track-shadow);
    background: var(--track-background);
    border-radius: 50%;
    z-index: 0;
}

:host(:focus)::before {
    box-shadow:
        var(--focus-shadow),
        var(--track-shadow);
}

:host::after {
    content: '';
    grid-area: handle;
    width: var(--handle-width);
    height: 0;
    padding-top: var(--handle-width);
    box-shadow: var(--handle-shadow);
    border: 0;
    border-radius: 50%;
    z-index: 0;
}

:host > .handle {
    grid-area: handle;
    z-index: 2;
}

:host > .tick {
    grid-area: handle;
    outline-width: 0;
    z-index: 1;
}

:host > .control-label {
    grid-area: label;
    text-align: center;
}

:host > output {
    grid-area: handle;
    pointer-events: none;
    z-index: 2;
}


/* label */

label {
    align-self: start;
    font-size: var(--label-font-size);
    line-height: var(--label-line-height);
    letter-spacing: var(--label-letter-spacing);
    color: var(--label-color);
}


/* output */

output {
    font-family: 'Fira Mono', 'Andale Mono', monospace;
    font-size: var(--output-font-size, 0.75rem);
    line-height: var(--output-line-height);
    letter-spacing: var(--output-letter-spacing);
    width: var(--handle-width);
    height: auto;
    text-align: center;
    white-space: pre;
    color: var(--output-color);
}

output > abbr {
    font-size: 0.8em;
    margin-left: 0.125em;
    vertical-align: baseline;
}


/* knob */

.handle {
    cursor: pointer;
    cursor: ns-resize;
    width: var(--handle-width);
    height: 0;
    padding-top: calc(var(--handle-width) - 2px);
    background: var(--handle-background);
    border: var(--handle-border);
    border-radius: 50%;
    transform: rotate3d(0, 0, 1, calc(var(--rotation-start) + var(--unit-value) * var(--rotation-range)));

    -webkit-touch-callout: none; /* iOS Safari */
      -webkit-user-select: none; /* Safari */
          -ms-user-select: none; /* Internet Explorer/Edge */
              user-select: none; /* Non-prefixed version */
}

.handle::after {
    content: '';
    position: absolute;
    width: var(--dot-width);
    height: var(--dot-height);
    left: 50%;
    top: calc(50% + var(--dot-distance));
    transform: translate3d(-50%, 0, 0);
    border-radius: 50%;
    background-color: var(--dot-background);
    border: var(--dot-border);
    box-shadow: var(--dot-shadow);
}


/* tick */

.tick {
    cursor: pointer;

    display: block;
    padding: calc(2 * var(--tick-radius) + var(--tick-line-height) + var(--tick-height)) 0 0 0;
    width: 0;
    box-sizing: content-box;
    height: auto;
    transform-origin: 50% 50%;

    font-size: var(--tick-font-size);
    line-height: var(--tick-line-height);
    letter-spacing: var(--tick-letter-spacing);
    text-shadow: var(--tick-text-shadow);
    color: var(--tick-color);
    border-width: 0;
    background: transparent;

    /* Interior tick value text appears outside the tick */
    overflow: visible;

    -webkit-touch-callout: none; /* iOS Safari */
      -webkit-user-select: none; /* Safari */
          -ms-user-select: none; /* Internet Explorer/Edge */
              user-select: none; /* Non-prefixed version */
}

.tick::before {
    content: '';
    display: block;

    width: var(--tick-width);
    height: var(--tick-height);
    background: var(--tick-background);
    border: var(--tick-border);
    border-radius: var(--tick-border-radius);
    transform: translate3d(-50%, 0, 0);
}

.tick::after {
    content: none;
}

.tick > span {
    /* Required for transform */
    display: inline-block;
    width: auto;

    /* Register the start of the text right in the centre of the tick so that
       when it is transformed back it is perfectly centred. */
    margin-left: 50%;
    transform-origin: 50% 50%;
}
