
/**
rotary-control

```html
<rotary-control min="0" max="3" ticks="0 0.5 1 1.5 2 2.5 3" unit="s">Rotary</rotary-control>
```
**/

:host {
    --knob-width: 3rem;
    --knob-background: black;
    --knob-border: none;

    --label-font-size: 1em;
    --label-line-height: 1.2em;
    --label-letter-spacing: -0.04em;
    --label-color: black;
    --label-shadow: none;

    --output-font-size: 0.75rem;
    --output-line-height: 1rem;
    --output-letter-spacing: -0.04em;
    --output-color: #46789a;
    --output-shadow: none;

    --dot-width: 0.25rem;
    --dot-height: var(--dot-width);
    --dot-distance: 1.125rem;
    --dot-background: white;
    --dot-border: none;
    --dot-shadow: none;

    --rotation-start: 30deg;
    --rotation-range: 300deg;

    --tick-width: 0.1875rem;
    --tick-height: var(--tick-width);
    --tick-distance: 1.75rem;
    --tick-border-radius: 50%;
    --tick-line-height: 0.75rem;

    position: relative;
    display: grid;
    grid-template-areas:
        'knob knob'
        'label plugs';
    grid-template-columns: 1fr min-content;
    grid-template-rows: calc(2 * var(--tick-distance) + 2 * var(--tick-width) + 2 * var(--tick-line-height)) min-content;
    width: calc(2 * var(--tick-distance) + 2 * var(--tick-width) + 2 * var(--tick-line-height));
}

:host(:focus) {
    --label-color: #46789a;
    --output-color: white;
    --knob-background: #46789a;
}

:host > .knob {
    grid-area: knob;
    position: absolute;
    left: calc(50% - 0.5 * var(--knob-width));
    top:  calc(50% - 0.5 * var(--knob-width));
}

:host > .tick {
    grid-area: knob;
    position: absolute;
    left: 50%;
    top:  50%;
    margin: 0;
}

:host > .control-label {
    grid-area: label;
    text-align: center;
}

:host > output {
    grid-area: knob;
    position: absolute;
    left: 50%;
    top:  50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
}


/* output */

/* knob */

.knob {
    cursor: pointer;
    width: var(--knob-width);
    height: var(--knob-width);
    background: var(--knob-background);
    border: var(--knob-border);
    border-radius: 50%;
}

.knob::after {
    content: '';
    position: absolute;
    width: var(--dot-width);
    height: var(--dot-height);
    left: 50%;
    top: calc(50% + var(--dot-distance));
    transform: translate(-50%, 0);
    border-radius: 50%;
    background-color: var(--dot-background);
    border: var(--dot-border);
    box-shadow: var(--dot-shadow);
}


/* tick */

.tick {
    /* Temp override tick styles from range control */
    width: var(--tick-width);
    height: var(--tick-height);
    padding-top: var(--tick-height);
    background: var(--tick-background);
    border-radius: var(--tick-border-radius);
    overflow: visible;
}

.tick::after {
    content: none;
}

.tick > span {
    /* Required for transform */
    display: inline-block;
    width: auto;

    /* Register the start of the text right in the centre of the tick so that
       when it is transformed back it is perfectly centred. */
    margin-left: 50%;
    transform-origin: 50% 50%;
}
