
<!DOCTYPE html>
<html lang="en">
<head>
    ${ include('../../templates/head.literal', '../../package.json') }

    <script title="debug">
        window.DEBUG = true;
    </script>
    
    <link rel="stylesheet" href="../../module.css">
    ${ include('../../templates/style.html') }

    <style></style>

    <template id="waveform-canvas">
        <canvas width="$\{ data.pxbox && data.pxbox.width }" height="$\{ data.pxbox && data.pxbox.height }" style="grid-column: 1; grid-row: 1; align-self: stretch; justify-self: stretch;"></canvas>
    </template>

    <template id="xy-input-shadow">
        <template id="x-tick">
            <label part="x-tick tick" style="transform: translate(calc($\{ data.up.toViewX(data.tick.value) }em - 50%), 1.75em);">
                <span>$\{ data.tick.label }</span>
            </label>
        </template>

        <template id="y-tick">
            <label part="y-tick tick" style="transform: translate(-2.75em, calc($\{ data.up.toViewY(data.tick.value) }em + 50%));">
                <span>$\{ data.tick.label }</span>
            </label>
        </template>

        <label>
            <slot></slot>
        </label>

        $\{ data.include ? include(data.include, data) : '' }

        <svg viewbox="0 -1 1 1">
            <defs>
                <linearGradient id="handle-gradient" x1="0" x2="0" y1="0" y2="1">
                    <stop class="stop-1" offset="0%"/>
                    <stop class="stop-2" offset="100%"/>
                </linearGradient>

                <line part="$\{ data.part }" x1="$\{ data.x1 }" x2="$\{ data.x2 }" y1="$\{ data.y1 }"  y2="$\{ data.y2 }" id="line-def"></line>
                <circle part="handle" class="control control-handle control-point" cx="$\{ data.up.toViewX(data.point[0]) }" cy="$\{ data.up.toViewY(data.point[1]) }" r="0.5" data-index="$\{ data.index }" id="control-def"></circle>
            </defs>

            $\{ data.xaxis
            .filter((line) => data.valuebox.x + data.valuebox.width >= line.value && line.value >= data.valuebox.x)     
            .map((line) => include(this.node.getRootNode().getElementById('line-def'), {
                part: 'x-line line',
                x1: data.toViewX(line.value),
                x2: data.toViewX(line.value),
                y1: data.toViewY(data.valuebox.y),
                y2: data.toViewY(data.valuebox.y + data.valuebox.height)
            })) }

            $\{ data.yaxis
            .filter((line) => data.valuebox.y + data.valuebox.height >= line.value && line.value >= data.valuebox.y)    
            .map((line) => include(this.node.getRootNode().getElementById('line-def'), {
                part: 'y-line line',
                x1: data.toViewX(data.valuebox.x),
                x2: data.toViewX(data.valuebox.x + data.valuebox.width),
                y1: data.toViewY(line.value),
                y2: data.toViewY(line.value)
            })) }

            $\{ data.points.map((point, index) => include(this.node.getRootNode().getElementById('control-def'), {
                up: data,
                point,
                index
            })) }
        </svg>

        $\{ data.xaxis
        .filter((tick) => tick.label && data.valuebox.x + data.valuebox.width >= tick.value && tick.value >= data.valuebox.x)
        .map((tick, index) => include(this.node.getRootNode().getElementById('x-tick'), { up: data, tick })) }

        $\{ data.yaxis
        .filter((tick) => tick.label && data.valuebox.y + data.valuebox.height >= tick.value && tick.value >= data.valuebox.y)   
        .map((tick, index) => include(this.node.getRootNode().getElementById('y-tick'), { up: data, tick })) }
    </template>
</head>

<body class="docs-grid grid 3x-grid @1-6x-grid @2-9x-grid">
    <nav class="x1 x-stretch y1 @2-x1 @2-1x">
        <a class="thumb thumb-1:1" width="400" height="400" style="background-image: url('../../images/logo.svg'); background-size: contain; width: 120%; padding-top: 120%; max-width: 6rem; margin-top: -16%; margin-left: -8%; margin-right: -12%;">Bolt</a>
    </nav>

    ${ include('../../templates/element.literal', comments("./module.js", "./shadow.css")) }

    <script type="module" src="./module.js"></script>

    ${ include('../../templates/scripts.html') }
    
    <script type="module">
    // Log events
    import events from '../../../dom/modules/events.js';
    events('input change', document)
    .each((e) => console.log(e.type, JSON.stringify(e.target.value)));
    </script>
</body>
